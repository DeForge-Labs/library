name: Process Node Updates

on:
    pull_request:
        types: [closed]
        branches: [main]
    workflow_dispatch:
        inputs:
            force_all:
                description: 'Process all nodes manually'
                required: false
                default: 'false'
                type: choice
                options:
                    - 'true'
                    - 'false'
            branch:
                description: 'Target branch environment'
                required: false
                default: 'main'
                type: choice
                options:
                    - 'main'
                    - 'dev'


jobs:
    process-nodes:
        if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3
              with:
                fetch-depth: 0

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                node-version: '22'

            - name: Determine updated nodes
              id: changed-nodes
              run: |
                # Only force processing all nodes if explicitly requested
                if [[ "${{ github.event.inputs.force_all }}" == "true" ]]; then
                    echo "Processing all node directories"
                    NODE_DIRS=$(find . -type f -name "package.json" | grep -v "node_modules" | sed 's|/package.json$||' | sed 's|^\./||')

                    declare -A NODE_STATUS

                    while IFS= read -r dir; do
                        NODE_STATUS[$dir]="M"
                    done <<< "$NODE_DIRS"

                    OUTPUT=()
                    for dir in "${!NODE_STATUS[@]}"; do
                        OUTPUT+=("${dir}:${NODE_STATUS[$dir]}")
                    done

                    if [ ${#OUTPUT[@]} -eq 0 ]; then
                        echo 'nodes=[]' >> $GITHUB_OUTPUT
                    else
                        NODES_ENCODED=$(printf "%s\n" "${OUTPUT[@]}" | sort | uniq | base64 -w 0)
                        echo "nodes=$NODES_ENCODED" >> $GITHUB_OUTPUT
                    fi

                    echo "All nodes marked as modified:"
                    printf "%s\n" "${OUTPUT[@]}"

                else
                    echo "Processing only changed node directories"

                    if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                        PREVIOUS_HASH=${{ github.event.pull_request.base.sha }}
                    else
                        PREVIOUS_HASH=$(git rev-parse HEAD~1)
                    fi

                    CHANGES=$(git diff --name-status $PREVIOUS_HASH HEAD | grep -E '\.jsx?$|\.json$' | grep -v 'node_modules')

                    declare -A NODE_STATUS

                    while IFS=$'\t' read -r status path; do
                        top_two=$(echo "$path" | sed -E 's|^(([^/]+/){2}).*|\1|' | sed 's|/$||')
                        if [[ "$status" == "D" ]]; then
                            NODE_STATUS[$top_two]="D"
                        elif [[ "${NODE_STATUS[$top_two]}" != "D" ]]; then
                            NODE_STATUS[$top_two]="M"
                        fi
                    done <<< "$CHANGES"

                    OUTPUT=()
                    for dir in "${!NODE_STATUS[@]}"; do
                        OUTPUT+=("${dir}:${NODE_STATUS[$dir]}")
                    done

                    if [ ${#OUTPUT[@]} -eq 0 ]; then
                        echo 'nodes=[]' >> $GITHUB_OUTPUT
                    else
                        NODES_ENCODED=$(printf "%s\n" "${OUTPUT[@]}" | sort | uniq | base64 -w 0)
                        echo "nodes=$NODES_ENCODED" >> $GITHUB_OUTPUT
                    fi

                    echo "Changed nodes and statuses:"
                    printf "%s\n" "${OUTPUT[@]}"
                fi

            - name: Call server update script
              uses: actions/github-script@v6
              with:
                script: |
                    const encoded = '${{ steps.changed-nodes.outputs.nodes }}';
                    const decoded = Buffer.from(encoded, 'base64').toString('utf-8');
                    const lines = decoded.trim().split("\n");

                    const changedNodes = lines.map(line => {
                        const [folder, status] = line.split(":");
                        return { folder, status };
                    });

                    if (changedNodes.length === 0) {
                        console.log('No node directories were changed. Nothing to update.');
                        return;
                    }

                    console.log(`Updating the following nodes:`);
                    console.log(changedNodes);

                    // Determine API URL based on branch selection
                    const branch = '${{ github.event.inputs.branch }}' || 'main';
                    const apiUrl = branch === 'dev' ? 'https://devapi.deforge.io/api/update-nodes' : 'https://api.deforge.io/api/update-nodes';
                    
                    console.log(`Using API URL: ${apiUrl} for branch: ${branch}`);

                    try {
                        const response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: {
                            'Authorization': `Bearer ${{ secrets.UPDATE_NODES_KEY }}`,
                            'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                            nodes: changedNodes
                            })
                        });

                        if (!response.ok) {
                            throw new Error(`Server responded with status: ${response.status}`);
                        }

                        const data = await response.json();
                        console.log('Server response:\n', data);
                    } catch (error) {
                        console.error('Error calling server update script:', error.message);
                        core.setFailed('Failed to update plugins on server');
                    }

            - name: Setup SSH key
              run: |
                mkdir -p ~/.ssh
                echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
                chmod 600 ~/.ssh/id_rsa
                ssh-keyscan -p ${{ secrets.VPS_PORT }} -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
            - name: Restart server
              run: |
                ssh -p ${{ secrets.VPS_PORT }} -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa "${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }}" bash -c "'
                    set -eo pipefail

                    if [ \"${{ github.ref_name }}\" = \"main\" ]; then
                        pm2 restart 21
                    elif [ \"${{ github.ref_name }}\" = \"dev\" ]; then
                        pm2 restart 34
                    fi
                '"