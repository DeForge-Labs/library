{
  "Create Workflow Node": {
	"scope": "javascript",
    "prefix": "node",
    "body": [
      "import BaseNode from \"../../core/BaseNode/node.js\";",
      "",
      "const config = {",
      "  title: \"$1\",",
      "  category: \"\",",
      "  type: \"${TM_DIRECTORY/.*[\\\\\\/]([^\\\\\\/]+)$/$1/}\",",
      "  icon: {},",
      "  desc: \"\",",
      "  credit: 0,",
      "  inputs: [],",
      "  outputs: [],",
      "  fields: [],",
      "  difficulty: \"\",",
      "  tags: []",
      "};",
      "",
      "class ${TM_DIRECTORY/.*[\\\\\\/]([^\\\\\\/]+)$/$1/} extends BaseNode {",
      "  constructor() {",
      "    super(config);",
      "  }",
      "",
	  "  /**",
	  "   * @override",
	  "   * @inheritDoc",
      "   * @param {import('../../core/BaseNode/node.js').Inputs[]} inputs",
      "   * @param {import('../../core/BaseNode/node.js').Contents[]} contents",
      "   * @param {import('../../core/BaseNode/node.js').IServerData} serverData",
      "   */",
      "  estimateUsage(inputs, contents, serverData) {",
      "     return this.getCredit();",
      "  }",
	  "",
      "  /**",
      "   * @override",
	  "   * @inheritDoc",
      "   * @param {import('../../core/BaseNode/node.js').Inputs[]} inputs",
      "   * @param {import('../../core/BaseNode/node.js').Contents[]} contents",
      "   * @param {import('../../core/BaseNode/node.js').IWebConsole} webconsole",
      "   * @param {import('../../core/BaseNode/node.js').IServerData} serverData",
      "   */",
      "  async run(inputs, contents, webconsole, serverData) {",
      "    $0",
      "  }",
      "}",
      "",
      "export default ${TM_DIRECTORY/.*[\\\\\\/]([^\\\\\\/]+)$/$1/}"
    ],
    "description": "Creates a new, fully-typed workflow node boilerplate."
  }
}